name: Java CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up JDK 24
      uses: actions/setup-java@v3
      with:
        java-version: '24'
        distribution: 'temurin'
        cache: maven
    
    - name: Build with Maven
      run: mvn -B package --file pom.xml
    
    - name: Run tests
      run: mvn test
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: app-jar
        path: target/*.jar

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: app-jar
        path: target
        
    - name: Copy JAR to Server via SCP
      uses: appleboy/scp-action@v0.1.7 # Using a specific version
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.SSH_PORT || 22 }}
        source: "target/*.jar" # Path to the JAR on the GitHub runner
        target: "${{ secrets.TARGET_DIR }}" # Destination path on the server

    - name: Execute deployment commands on Server
      uses: appleboy/ssh-action@v1.0.3 # Using a specific version
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.SSH_PORT || 22 }}
        script: |
          echo "JAR file has been copied to ${{ secrets.TARGET_DIR }}"
          
          # Navigate to the target directory on the server
          cd ${{ secrets.TARGET_DIR }}
          
          # Stop the existing application (adjust as needed)
          #echo "Attempting to stop existing application..."
          # Option 1: Using pkill (ensure APP_JAR_NAME is unique enough for this command)
          #sudo pkill -f 'java -jar ${{ secrets.APP_JAR_NAME }}' || echo "No process found running with name ${{ secrets.APP_JAR_NAME }} or failed to kill."
          # Option 2: If you know the port (e.g., 8080)
          # PID=$(sudo lsof -t -i:8080)
          # if [ -n "$PID" ]; then
          #   echo "Stopping application on port 8080 with PID $PID"
          #   sudo kill -9 $PID
          # else
          #   echo "No application found running on port 8080."
          # fi
          
          # Give a moment for the port to be released if necessary
          #sleep 5 

          # Start the new application
          # echo "Starting new application: ${{ secrets.APP_JAR_NAME }}"
          # Run in background, redirect output to app.log
          # Add any Java options or Spring profiles as needed.
          # nohup java -jar -Dserver.port=8080 ${{ secrets.APP_JAR_NAME }} --spring.profiles.active=prod > app.log 2>&1 &
          
          echo "Application deployment script executed. Check logs with: tail -f ${{ secrets.TARGET_DIR }}/app.log"
          echo "To check if process is running: ps aux | grep '${{ secrets.APP_JAR_NAME }}'"
